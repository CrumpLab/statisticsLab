[
["lab-10-factorial-anova.html", "Chapter 10 Lab 10: Factorial ANOVA 10.1 Does standing up make you focus more? 10.2 Lab Skills Learned 10.3 Important Stuff 10.4 R 10.5 Excel 10.6 SPSS 10.7 JAMOVI", " Chapter 10 Lab 10: Factorial ANOVA 10.1 Does standing up make you focus more? This lab activity uses the data from “Stand by your Stroop: Standing up enhances selective attention and cognitive control” (Rosenbaum, Mama, Algom, 2017) to teach the analysis of a 2x2 design using ANOVA. Although the research design is a 2x2 repeated meaures design, we treat the design both as repeated measures, and as a between-subjects design to illustrate how to conduct either type of ANOVA in software. 10.1.1 STUDY DESCRIPTION Do you pay more attention when you are sitting or standing? We analyse the data from “Stand by your Stroop: Standing up enhances selective attention and cognitive control” (Rosenbaum, Mama, Algom, 2017). This paper asked whether sitting versus standing would influence a measure of selective attention, the ability to ignore distracting information. They used a classic test of selective attention, called the Stroop effect. In a typical Stroop experiment, subjects name the color of words as fast as they can. The trick is that sometimes the color of the word is the same as the name of the word, and sometimes it is not. Here are some examples: Congruent trials occur when the color and word match. So, the correct answers for each of the congruent stimuli shown would be to say, red, green, blue and yello. Incongruent trials occur when the color and word mismatch. The correct answers for each of the incongruent stimuli would be: blue, yellow, red, green. The Stroop effect is an example of a well-known phenomena. What happens is that people are faster to name the color of the congruent items compared to the color of the incongruent items. This difference (incongruent reaction time - congruent reaction time) is called the Stroop effect. Many researchers argue that the Stroop effect measures something about selective attention, the ability to ignore distracting information. In this case, the target information that you need to pay attention to is the color, not the word. For each item, the word is potentially distracting, it is not information that you are supposed to respond to. However, it seems that most people can’t help but notice the word, and their performance in the color-naming task is subsequently influenced by the presence of the distracting word. People who are good at ignoring the distracting words should have small Stroop effects. They will ignore the word, and it won’t influence them very much for either congruent or incongruent trials. As a result, the difference in performance (the Stroop effect) should be fairly small (if you have “good” selective attention in this task). People who are bad at ignoring the distracting words should have big Stroop effects. They will not ignore the words, causing them to be relatively fast when the word helps, and relatively slow when the word mismatches. As a result, they will show a difference in performance between the incongruent and congruent conditions. If we take the size of the Stroop effect as a measure of selective attention, we can then start wondering what sorts of things improve selective attention (e.g., that make the Stroop effect smaller), and what kinds of things impair selective attention (e.g., make the Stroop effect bigger). The research question of this study was to ask whether standing up improves selective attention compared to sitting down. They predicted smaller Stroop effects when people were standing up and doing the task, compared to when they were sitting down and doing the task. 10.1.2 Study Methods The design of the study was a 2x2 repeated-measures design. The first IV was congruency (congruent vs incongruent). The second IV was posture (sitting vs. standing). The DV was reaction time to name the word. There were 50 participants in the study. 10.2 Lab Skills Learned Conducting a 2x2 between-subjects ANOVA Conducting a 2x2 repeated-measures ANOVA 10.3 Important Stuff citation: Rosenbaum, D., Mama, Y., &amp; Algom, D. (2017). Stand by Your Stroop: Standing Up Enhances Selective Attention and Cognitive Control. Psychological science, 28(12), 1864-1867. Link to .pdf of article Data in .csv format 10.4 R 10.4.1 Load the data Remember that any line with a # makes a comment and the code does not run. Below is how to load the .csv data from the online repository, or from a local file (you need to change the file path to where the local file is, if you downloaded it). The data contains all of the measures and conditions from Experiment 1 in the paper. library(data.table) #all_data &lt;- fread(&quot;https://github.com/CrumpLab/statisticsLab/raw/master/stroop_stand.csv&quot;) all_data &lt;- fread(&quot;data/stroop_stand.csv&quot;) 10.4.2 Inspect the dataframe This will give you a big picture of the data frame. Click the button to view it in your browser, then take a look to see what is in it. library(summarytools) view(dfSummary(all_data)) We see there are four columns of numbers. The column names tell us whether the data is for a congruent or incongruent condition, and whether the participant was sitting or standing. Note, this data is in wide-format, not long-format. Each subject has 4 measures per row. We will need to change this to work with the data in R. 10.4.3 Get the data you need This data file contains all of the data from Experiment 1 in the paper. So, we don’t need to get rid of any rows. 10.4.4 Get the data into the format you want As mentioned before we need to convert the data from wide to long format. What we want at the end of this conversion is: A column for the subject variable A column for the congruency variable A column for the posture (sit vs. stand) variable A column for the DV ( mean reaction times) We look at two ways to do the transformation from wide to long. The first way is to “do it by hand”, which refers to creating every variable individually, and then putting them together in a single data frame. This next bit of code does this, and you can check out stroop_df to see the result. RTs &lt;- c(as.numeric(unlist(all_data[,1])), as.numeric(unlist(all_data[,2])), as.numeric(unlist(all_data[,3])), as.numeric(unlist(all_data[,4])) ) Congruency &lt;- rep(rep(c(&quot;Congruent&quot;,&quot;Incongruent&quot;),each=50),2) Posture &lt;- rep(c(&quot;Stand&quot;,&quot;Sit&quot;),each=100) Subject &lt;- rep(1:50,4) stroop_df &lt;- data.frame(Subject,Congruency,Posture,RTs) Another way to transform between long and wide is to use R functions that were designed to do this job. For example there are the spread and gather functions from the tidyr package, and the melt and cast functions, which also do some data frame transforming. The transformation from wide to long can be complicated depending on the structure of the data, and you may often find it helpful to google these functions to look for more examples of their use. Let’s use the tidyr gather function to change our data from wide to long library(tidyr) ## Warning: package &#39;tidyr&#39; was built under R version 3.4.3 stroop_long&lt;- gather(all_data, key=Condition, value=RTs, congruent_stand, incongruent_stand, congruent_sit, incongruent_sit) Take a moment to look at stroop_long. It is almost what we need. It is certainly in long format. There is a column for Subjects, and a column for the RTs, but there is only one column for both IVs, that’s no good. There are two IVs, we need two columns. Fortunately, the levels in the new Condition column are coded with a specific and consistent structure: congruent_stand incongruent_stand congruent_sit incongruent_sit If only we could split these by the “_&quot; (underscore), then we would have two columns for the congruency and the posture variable. We can do this using tstrsplit from the data.table package new_columns &lt;- tstrsplit(stroop_long$Condition, &quot;_&quot;, names=c(&quot;Congruency&quot;,&quot;Posture&quot;)) You can look inside new_columns to see that we succesfully made the split. Now, we just need to add them on to the stroop_long data frame. stroop_long &lt;- cbind(stroop_long,new_columns) Look at the stroop_long data frame and you will find that we have added two new columns, one that codes for Congruency, and the other that codes for posture. Using this method we still haven’t added a column for subjects. We can do that like this: stroop_long &lt;- cbind(stroop_long,Subject=rep(1:50,4)) 10.4.4.1 The independent variable After all of this data transformation you should be familiar with the IVs. Congruency: congruent vs. incongruent Posture: stand vs. sit 10.4.4.2 The dependent variables There is only one DV that we look at, that is the mean reaction time to name the color. 10.4.5 Look at the data Remember before we do any analysis, we always want to “look” at the data. This first pass let’s us know if the data “look right”. For example, the data file could be messed up and maybe there aren’t any numbers there, or maybe the numbers are just too weird. Let’s make a quick histogram of all of the RT data, like this: hist(stroop_long$RTs) This looks pretty good, there are no super huge numbers here. 10.4.6 Look at the means As part of looking at the data, we might as well make a figure that shows the mean reaction times in each condition, and some error bars to look at the spread in each condition. The following code takes two important steps: Get the means for each condition, by averaging over the means for each subject. These are put into the data frame called plot_means. Make a graph with the plot_means data frame using ggplot2. library(dplyr) ## ## Attaching package: &#39;dplyr&#39; ## The following objects are masked from &#39;package:data.table&#39;: ## ## between, first, last ## The following objects are masked from &#39;package:stats&#39;: ## ## filter, lag ## The following objects are masked from &#39;package:base&#39;: ## ## intersect, setdiff, setequal, union library(ggplot2) ## Warning: package &#39;ggplot2&#39; was built under R version 3.4.4 plot_means &lt;- stroop_long %&gt;% group_by(Congruency,Posture) %&gt;% summarise(mean_RT = mean(RTs), SEM = sd(RTs)/sqrt(length(RTs))) ## Warning: package &#39;bindrcpp&#39; was built under R version 3.4.4 ggplot(plot_means, aes(x=Posture, y=mean_RT, group=Congruency, fill=Congruency))+ geom_bar(stat=&quot;identity&quot;, position=&quot;dodge&quot;)+ geom_errorbar(aes(ymin=mean_RT-SEM, ymax=mean_RT+SEM), position=position_dodge(width=0.9), width=.2)+ theme_classic()+ coord_cartesian(ylim=c(700,1000)) 10.4.7 Conduct the ANOVA In this lab we will show you how to conduct ANOVAs for factorial designs that are for: fully between-subjects designs (both IVs are between-subjects IVs) fully repeated measures designs (both IVs are repeated measures) The data we are looking at right now is fully repeated measures. However, in this lab we are first going to pretend that the experiment was not repeated measures. We are going to pretend it was fully between-subjects. Then we are going to conduct a between-subjects ANOVA. After that, we will conduct a repeated-measures ANOVA, which is what would be most appropriate for this data set. The overall point is to show you how to both of them, and the discuss how to interpret them and write them both up. 10.4.8 Between Subjects ANOVA We can always conduct a between-subjects version of the ANOVA on repeated-measures data if we wanted to. In this case we wouldn’t really want to do this. But, we will do this for educational purposes to show you how to do it in R. The syntax is very similar to what we do for one-way ANOVAs, remember the syntax was: aov(DV ~ IV, dataframe) If you want to add another IV, all you need to do is insert another one into the formula, like this: aov(DV ~ IV1*IV2, dataframe) Just, switch DV to the name of your dependent measure, and IV1 and IV2 to the names of your independent variables. Finally, put the name of your dataframe. Your dataframe must be in long format with one observation of the DV per row. Our formula will look like this: aov(RTs ~ Congruency*Posture, stroop_long) In plain language, this formula means, analyze RTs by the Congruency and Posture Variables. R will automatically produce the main effects for Congruency and Posture, as well as the interaction (Congruency X Posture). Also, remember, that in the following code, we use a few other functions so that we can print out the results nicely. library(xtable) aov_out&lt;-aov(RTs ~ Congruency*Posture, stroop_long) summary_out&lt;-summary(aov_out) library(xtable) knitr::kable(xtable(summary_out)) Df Sum Sq Mean Sq F value Pr(&gt;F) Congruency 1 576821.635 576821.635 43.7344419 0.0000000 Posture 1 32303.453 32303.453 2.4492381 0.1191950 Congruency:Posture 1 6560.339 6560.339 0.4974029 0.4814808 Residuals 196 2585080.215 13189.185 NA NA We can also have R print out the Grand Mean, the means for each level of each main effect, and the means for the interaction term. This is the same print out you would get in the console for R. It is admittedly not very pretty. There’s probably a way to make the means provided by model.tables() more pretty. If we find a way we will update this section, if you find a way, please let us know. print(model.tables(aov_out,&quot;means&quot;), format=&quot;markdown&quot;) ## Tables of means ## Grand mean ## ## 868.6454 ## ## Congruency ## Congruency ## congruent incongruent ## 814.9 922.3 ## ## Posture ## Posture ## sit stand ## 881.4 855.9 ## ## Congruency:Posture ## Posture ## Congruency sit stand ## congruent 821.9 808.0 ## incongruent 940.8 903.9 10.4.8.1 ANOVA write-up Here are the steps for writing up the results of an ANOVA: Say what means you analyzed Say what test you performed Say the inferential statisic for each of the effects (main effects and interaction) Say the pattern of results for each effect. A short example of the whole write-up is below: Example write-up We submitted the mean reaction times for each group to a 2 (Congruency: congrueny vs. incongruent) x 2 (Posture: Standing vs. Sitting) between-subjects ANOVA. There was a main effect of Congruency, F (1, 196) = 43.73, MSE = 13189.185, p &lt; 0.001. Mean reaction times were slower for incongruent (922 ms) than congruent groups (815 ms). There main effect of Posture was not significant, F (1, 196) = 2.45, MSE = 13189.185, p =.119. Mean reaction times were slower for sitting (881 ms) than standing groups (855 ms). The two-way interaction between Congruency and Posture was not significant, F (1, 196) = .497, MSE = 13189.185, p &lt; 0.481. For every F-value, we report F (df1, df2) = F-value, MSE = MSE for the error term, and p = x.xxx. In R, the df1, for the df in the numerator is always listed beside the name for a particular effect. For example, Congruency has 1 degree of freedom (there are two condition, and 2-1 =1). Similarly, the relevant F and p-value are listed in the same row as the effect of interest. However, the error term used to calculate the F-value is listed at the bottom, in R this is called “Residuals”. Df2, the df for the denominator is listed beside “Residuals”, in our case it was 196. The important bit is the MSE, which was 13189.185. Notice, that in the write up for each main effect and interaction we always reported the same MSE. That’s because in this between-subjects version of the ANOVA, we divide by same very same error term. Also notice that we don’t report the sums of squares of the MSE for the effect. Why not? The main reason why not is that you can reconstruct those missing numbers just by knowing the dfs, the MSE for the error, and the f-value. For example, you can get the MSE for the effect by multiplying the F-value by the MSE for the error. Now you have both MSEs. You can get both Sums of Squares by multiplying by their associated dfs. That’s just working backwards from the F-value. You can always check if you are reporting the correct MSE for the error term. If the MSE for your effect (numerator) divided by the MSE you are using for the error term does not equal the F-value, then you must be using the wrong terms! 10.4.9 Repeated measures ANOVA Of course, the design for this experiment was not between-subjects, it was fully within-subjects. Every participant completed both congruent and incongruent trials, while they were standing or sitting. For this reason, we should conduct a repeated measures ANOVA. This way we will be able capitilize on the major benefit provided by the repeated measures design. We can remove the variance due to individual subjects from the error terms we use to calculate F-values for each main effect and interaction. Rember the formula for the one-factor repeated-measures ANOVA, we’ll remind you: aov( DV ~ IV + Error(Subject/IV), dataframe) To do the same for a design with more than one IV we put in another IV to the formula, like this: aov( DV ~ IV1*IV2 + Error( Subject/(IV1*IV2) ), dataframe) DV = name of dependent variable IV1 = name of first independent variable IV2 = name of second indpendent variable Subject = name of the subject variable, coding the means for each subject in each condition dataframe = name of the long-format data frame Here is what our formula will look like: aov(RTs ~ Congruency*Posture + Error(Subject/(Congruency*Posture)), stroop_long) The main thing you need to watch out for when running this analysis in R, is that all your factors need to be factors in R. Often times people will use numbers rather than words or letters to code the levels for specific factors. This can be very often done for the subjects factor, using number 1 for subject one, and number 2 for subject 2. If you want your column variable to be treated as a factor, then you may need to convert it to a factor. We do this below for the Subject variable, which happens to be coded as numbers. If we do not do this, the repeated-measures ANOVA will return incorrect results. For example, if you look at the stroop_long data frame, and click the little circle with an arrow on in it in the environment panel, you should see that Subject is an int. That stands for integer. You should also see that Congruency and Posture are Factor, that’s good. We need to turn Subject into Factor. stroop_long$Subject &lt;- as.factor(stroop_long$Subject) #convert subject to factor summary_out&lt;-aov(RTs ~ Congruency*Posture + Error(Subject/(Congruency*Posture)), stroop_long) library(xtable) knitr::kable(xtable(summary_out)) Df Sum Sq Mean Sq F value Pr(&gt;F) Residuals 49 2250738.636 45933.4416 NA NA Congruency 1 576821.635 576821.6349 342.452244 0.0000000 Residuals 49 82534.895 1684.3856 NA NA Posture 1 32303.453 32303.4534 7.329876 0.0093104 Residuals1 49 215947.614 4407.0942 NA NA Congruency:Posture 1 6560.339 6560.3389 8.964444 0.0043060 Residuals 49 35859.069 731.8177 NA NA print(model.tables(aov_out,&quot;means&quot;), format=&quot;markdown&quot;) ## Tables of means ## Grand mean ## ## 868.6454 ## ## Congruency ## Congruency ## congruent incongruent ## 814.9 922.3 ## ## Posture ## Posture ## sit stand ## 881.4 855.9 ## ## Congruency:Posture ## Posture ## Congruency sit stand ## congruent 821.9 808.0 ## incongruent 940.8 903.9 What’s different here? Are any of the means different now that we have conducted a repeated-meaures version of the ANOVA, instead of the between-subjects ANOVA? NO! The Grand Mean is still the Grand Mean. The means for the congruency conditions are still the same, the means for the Posture conditions are still the same, and the means for the interaction effect are still the same. The only thing that has changed is the ANOVA table. Now that we have removed the variance associated with individual subjects, our F-values are different. 10.5 Excel How to do it in Excel 10.6 SPSS How to do it in SPSS 10.7 JAMOVI How to do it in JAMOVI "]
]
